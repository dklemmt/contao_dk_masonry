




<!DOCTYPE html>
<html>
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    
    <title>masonry/dist/masonry.pkgd.min.js at master Â· desandro/masonry</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub" />
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png" />
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png" />
    <meta property="fb:app_id" content="1401488693436528"/>

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="desandro/masonry" name="twitter:title" /><meta content="masonry - Cascading grid layout library" name="twitter:description" /><meta content="https://1.gravatar.com/avatar/08452845db61b0edbb0c3c16d9599770?d=https%3A%2F%2Fidenticons.github.com%2F906a7cf4657ab3f2f031889a0ed25057.png&amp;r=x&amp;s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://1.gravatar.com/avatar/08452845db61b0edbb0c3c16d9599770?d=https%3A%2F%2Fidenticons.github.com%2F906a7cf4657ab3f2f031889a0ed25057.png&amp;r=x&amp;s=400" property="og:image" /><meta content="desandro/masonry" property="og:title" /><meta content="https://github.com/desandro/masonry" property="og:url" /><meta content="masonry - Cascading grid layout library" property="og:description" />

    <link rel="assets" href="https://github.global.ssl.fastly.net/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035/">
    <link rel="xhr-socket" href="/_sockets" />


    <meta name="msapplication-TileImage" content="/windows-tile.png" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="selected-link" value="repo_source" data-pjax-transient />
    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="4FD7A25A:4033:114D4D9:532622B6" name="octolytics-dimension-request_id" /><meta content="1721629" name="octolytics-actor-id" /><meta content="dklemmt" name="octolytics-actor-login" /><meta content="7a40e22fc39e813758d75a8dbb4c6abc0950aaa783f24325acaee79dd486d624" name="octolytics-actor-hash" />
    

    
    
    <link rel="icon" type="image/x-icon" href="https://github.global.ssl.fastly.net/favicon.ico" />

    <meta content="authenticity_token" name="csrf-param" />
<meta content="KTedTeCE50zH/EWjvsN9zByruz7yGgFedxGK+Lj4jco=" name="csrf-token" />

    <link href="https://github.global.ssl.fastly.net/assets/github-38269a8d7da2a54f27974215f4f2925eaad4d0d5.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://github.global.ssl.fastly.net/assets/github2-38408e89653ef671f9e6bc74ffaf307a3ac02571.css" media="all" rel="stylesheet" type="text/css" />
    


      <script crossorigin="anonymous" src="https://github.global.ssl.fastly.net/assets/frameworks-55976bc637c425207bc6e52d7ac4c125773713de.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://github.global.ssl.fastly.net/assets/github-a2d1d75e0ca9e7a3074ef5f60daf8b98e3aee934.js" type="text/javascript"></script>
      
      <meta http-equiv="x-pjax-version" content="a493a618dbe99e953da59450934392d2">

        <link data-pjax-transient rel='permalink' href='/desandro/masonry/blob/0d9c335e3f2c309922829e11d3e4fdc09e7984d8/dist/masonry.pkgd.min.js'>

  <meta name="description" content="masonry - Cascading grid layout library" />

  <meta content="85566" name="octolytics-dimension-user_id" /><meta content="desandro" name="octolytics-dimension-user_login" /><meta content="380961" name="octolytics-dimension-repository_id" /><meta content="desandro/masonry" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="380961" name="octolytics-dimension-repository_network_root_id" /><meta content="desandro/masonry" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/desandro/masonry/commits/master.atom" rel="alternate" title="Recent Commits to masonry:master" type="application/atom+xml" />

  </head>


  <body class="logged_in  env-production macintosh vis-public page-blob">
    <a href="#start-of-content" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      <div class="header header-logged-in true">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/">
  <span class="mega-octicon octicon-mark-github"></span>
</a>

    
    <a href="/desandro/masonry/notifications" aria-label="You have unread notifications in this repository" class="notification-indicator tooltipped tooltipped-s contextually-unread" data-gotokey="n">
        <span class="mail-status unread"></span>
</a>

      <div class="command-bar js-command-bar  in-repository">
          <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<input type="text" data-hotkey="/ s" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    data-username="dklemmt"
      data-repo="desandro/masonry"
      data-branch="master"
      data-sha="a339befe7c0beac459ed6f570af63ea6a67d80ed"
  >

    <input type="hidden" name="nwo" value="desandro/masonry" />

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target" role="button" aria-haspopup="true">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container" aria-hidden="true">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked" />
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global" />
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="help tooltipped tooltipped-s" aria-label="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
        <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
            <li><a href="https://gist.github.com">Gist</a></li>
            <li><a href="/blog">Blog</a></li>
          <li><a href="https://help.github.com">Help</a></li>
        </ul>
      </div>

    


  <ul id="user-links">
    <li>
      <a href="/dklemmt" class="name">
        <img alt="Dirk Klemmt" class=" js-avatar" data-user="1721629" height="20" src="https://avatars3.githubusercontent.com/u/1721629?s=140" width="20" /> dklemmt
      </a>
    </li>

    <li class="new-menu dropdown-toggle js-menu-container">
      <a href="#" class="js-menu-target tooltipped tooltipped-s" aria-label="Create new...">
        <span class="octicon octicon-plus"></span>
        <span class="dropdown-arrow"></span>
      </a>

      <div class="new-menu-content js-menu-content">
      </div>
    </li>

    <li>
      <a href="/settings/profile" id="account_settings"
        class="tooltipped tooltipped-s"
        aria-label="Account settings ">
        <span class="octicon octicon-tools"></span>
      </a>
    </li>
    <li>
      <a class="tooltipped tooltipped-s" href="/logout" data-method="post" id="logout" aria-label="Sign out">
        <span class="octicon octicon-log-out"></span>
      </a>
    </li>

  </ul>

<div class="js-new-dropdown-contents hidden">
  

<ul class="dropdown-menu">
  <li>
    <a href="/new"><span class="octicon octicon-repo-create"></span> New repository</a>
  </li>
  <li>
    <a href="/organizations/new"><span class="octicon octicon-organization"></span> New organization</a>
  </li>


    <li class="section-title">
      <span title="desandro/masonry">This repository</span>
    </li>
      <li>
        <a href="/desandro/masonry/issues/new"><span class="octicon octicon-issue-opened"></span> New issue</a>
      </li>
</ul>

</div>


    
  </div>
</div>

      

        



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        

<ul class="pagehead-actions">

    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="KTedTeCE50zH/EWjvsN9zByruz7yGgFedxGK+Lj4jco=" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="380961" />

    <div class="select-menu js-menu-container js-select-menu">
      <a class="social-count js-social-count" href="/desandro/masonry/watchers">
        344
      </a>
      <span class="minibutton select-menu-button with-count js-menu-target" role="button" tabindex="0" aria-haspopup="true">
        <span class="js-select-button">
          <span class="octicon octicon-eye-unwatch"></span>
          Unwatch
        </span>
      </span>

      <div class="select-menu-modal-holder">
        <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
          <div class="select-menu-header">
            <span class="select-menu-title">Notification status</span>
            <span class="octicon octicon-remove-close js-menu-close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container" role="menu">

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">You only receive notifications for conversations in which you participate or are @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye-watch"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">You receive notifications for all conversations in this repository.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye-unwatch"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">You do not receive any notifications for conversations in this repository.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

  <li>
  

  <div class="js-toggler-container js-social-container starring-container on">
    <a href="/desandro/masonry/unstar"
      class="minibutton with-count js-toggler-target star-button starred"
      aria-label="Unstar this repository" title="Unstar desandro/masonry" data-remote="true" data-method="post" rel="nofollow">
      <span class="octicon octicon-star-delete"></span><span class="text">Unstar</span>
    </a>

    <a href="/desandro/masonry/star"
      class="minibutton with-count js-toggler-target star-button unstarred"
      aria-label="Star this repository" title="Star desandro/masonry" data-remote="true" data-method="post" rel="nofollow">
      <span class="octicon octicon-star"></span><span class="text">Star</span>
    </a>

      <a class="social-count js-social-count" href="/desandro/masonry/stargazers">
        5,710
      </a>
  </div>

  </li>


        <li>
          <a href="/desandro/masonry/fork" class="minibutton with-count js-toggler-target fork-button lighter tooltipped-n" title="Fork your own copy of desandro/masonry to your account" aria-label="Fork your own copy of desandro/masonry to your account" rel="nofollow" data-method="post">
            <span class="octicon octicon-git-branch-create"></span><span class="text">Fork</span>
          </a>
          <a href="/desandro/masonry/network" class="social-count">1,060</a>
        </li>


</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="repo-label"><span>public</span></span>
          <span class="mega-octicon octicon-repo"></span>
          <span class="author">
            <a href="/desandro" class="url fn" itemprop="url" rel="author"><span itemprop="title">desandro</span></a>
          </span>
          <span class="repohead-name-divider">/</span>
          <strong><a href="/desandro/masonry" class="js-current-repository js-repo-home-link">masonry</a></strong>

          <span class="page-context-loader">
            <img alt="Octocat-spinner-32" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline js-new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            

<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/desandro/masonry" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-gotokey="c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_tags repo_branches /desandro/masonry">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/desandro/masonry/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-gotokey="i" data-selected-links="repo_issues /desandro/masonry/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class='counter'>38</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/desandro/masonry/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-gotokey="p" data-selected-links="repo_pulls /desandro/masonry/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class='counter'>3</span>
            <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/desandro/masonry/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /desandro/masonry/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/desandro/masonry/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /desandro/masonry/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Network">
        <a href="/desandro/masonry/network" aria-label="Network" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-selected-links="repo_network /desandro/masonry/network">
          <span class="octicon octicon-git-branch"></span> <span class="full-word">Network</span>
          <img alt="Octocat-spinner-32" class="mini-loader" height="16" src="https://github.global.ssl.fastly.net/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                

  

<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/desandro/masonry.git" readonly="readonly">

    <span aria-label="copy to clipboard" class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/desandro/masonry.git" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="ssh"
  data-url="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone">
  <h3><strong>SSH</strong> clone URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="git@github.com:desandro/masonry.git" readonly="readonly">

    <span aria-label="copy to clipboard" class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="git@github.com:desandro/masonry.git" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="clone-url-box">
    <input type="text" class="clone js-url-field"
           value="https://github.com/desandro/masonry" readonly="readonly">

    <span aria-label="copy to clipboard" class="js-zeroclipboard url-box-clippy minibutton zeroclipboard-button" data-clipboard-text="https://github.com/desandro/masonry" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      <a href="#" class="js-clone-selector" data-protocol="ssh">SSH</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <span class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <a href="https://help.github.com/articles/which-remote-url-should-i-use">
    <span class="octicon octicon-question"></span>
    </a>
  </span>
</p>

  <a href="http://mac.github.com" data-url="github-mac://openRepo/https://github.com/desandro/masonry" class="minibutton sidebar-button js-conduit-rewrite-url" title="Save desandro/masonry to your computer and use it in GitHub Desktop." aria-label="Save desandro/masonry to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>


                <a href="/desandro/masonry/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download desandro/masonry as a zip file"
                   title="Download desandro/masonry as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          


<!-- blob contrib key: blob_contributors:v21:03f97c28cb2555885c83d6211b560804 -->

<p title="This is a placeholder element" class="js-history-link-replace hidden"></p>

<a href="/desandro/masonry/find/master" data-pjax data-hotkey="t" class="js-show-file-finder" style="display:none">Show File Finder</a>

<div class="file-navigation">
  

<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-remove-close js-menu-close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/blob/gh-pages/dist/masonry.pkgd.min.js"
                 data-name="gh-pages"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/blob/master/dist/masonry.pkgd.min.js"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.1.5/dist/masonry.pkgd.min.js"
                 data-name="v3.1.5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.1.5">v3.1.5</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.1.4/dist/masonry.pkgd.min.js"
                 data-name="v3.1.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.1.4">v3.1.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.1.3/dist/masonry.pkgd.min.js"
                 data-name="v3.1.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.1.3">v3.1.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.1.2/dist/masonry.pkgd.min.js"
                 data-name="v3.1.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.1.2">v3.1.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.1.1/dist/masonry.pkgd.min.js"
                 data-name="v3.1.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.1.1">v3.1.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.1.0/dist/masonry.pkgd.min.js"
                 data-name="v3.1.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.1.0">v3.1.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.0.3/dist/masonry.pkgd.min.js"
                 data-name="v3.0.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.0.3">v3.0.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.0.2/dist/masonry.pkgd.min.js"
                 data-name="v3.0.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.0.2">v3.0.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.0.1/dist/masonry.pkgd.min.js"
                 data-name="v3.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.0.1">v3.0.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v3.0.0/dist/masonry.pkgd.min.js"
                 data-name="v3.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v3.0.0">v3.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.08/dist/masonry.pkgd.min.js"
                 data-name="v2.1.08"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.08">v2.1.08</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.07/dist/masonry.pkgd.min.js"
                 data-name="v2.1.07"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.07">v2.1.07</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.06/dist/masonry.pkgd.min.js"
                 data-name="v2.1.06"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.06">v2.1.06</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.05/dist/masonry.pkgd.min.js"
                 data-name="v2.1.05"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.05">v2.1.05</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.04/dist/masonry.pkgd.min.js"
                 data-name="v2.1.04"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.04">v2.1.04</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.03/dist/masonry.pkgd.min.js"
                 data-name="v2.1.03"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.03">v2.1.03</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.02/dist/masonry.pkgd.min.js"
                 data-name="v2.1.02"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.02">v2.1.02</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.01/dist/masonry.pkgd.min.js"
                 data-name="v2.1.01"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.01">v2.1.01</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.1.0/dist/masonry.pkgd.min.js"
                 data-name="v2.1.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.1.0">v2.1.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.8/dist/masonry.pkgd.min.js"
                 data-name="v2.0.8"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.8">v2.0.8</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.7/dist/masonry.pkgd.min.js"
                 data-name="v2.0.7"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.7">v2.0.7</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.6/dist/masonry.pkgd.min.js"
                 data-name="v2.0.6"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.6">v2.0.6</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.5/dist/masonry.pkgd.min.js"
                 data-name="v2.0.5"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.5">v2.0.5</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.4/dist/masonry.pkgd.min.js"
                 data-name="v2.0.4"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.4">v2.0.4</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.3/dist/masonry.pkgd.min.js"
                 data-name="v2.0.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.3">v2.0.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.2/dist/masonry.pkgd.min.js"
                 data-name="v2.0.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.2">v2.0.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.1/dist/masonry.pkgd.min.js"
                 data-name="v2.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.1">v2.0.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v2.0.0/dist/masonry.pkgd.min.js"
                 data-name="v2.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v2.0.0">v2.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v1.3.2/dist/masonry.pkgd.min.js"
                 data-name="v1.3.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.3.2">v1.3.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v1.3.1/dist/masonry.pkgd.min.js"
                 data-name="v1.3.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.3.1">v1.3.1</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v1.3.0/dist/masonry.pkgd.min.js"
                 data-name="v1.3.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.3.0">v1.3.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v1.2.0/dist/masonry.pkgd.min.js"
                 data-name="v1.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.2.0">v1.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v1.1.3/dist/masonry.pkgd.min.js"
                 data-name="v1.1.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.1.3">v1.1.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/desandro/masonry/tree/v1.0.1/dist/masonry.pkgd.min.js"
                 data-name="v1.0.1"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text js-select-button-text css-truncate-target"
                 title="v1.0.1">v1.0.1</a>
            </div> <!-- /.select-menu-item -->
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/desandro/masonry" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">masonry</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/desandro/masonry/tree/master/dist" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">dist</span></a></span><span class="separator"> / </span><strong class="final-path">masonry.pkgd.min.js</strong> <span aria-label="copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="dist/masonry.pkgd.min.js" data-copied-hint="copied!"><span class="octicon octicon-clippy"></span></span>
  </div>
</div>


  <div class="commit file-history-tease">
    <img alt="David DeSandro" class="main-avatar js-avatar" data-user="85566" height="24" src="https://1.gravatar.com/avatar/08452845db61b0edbb0c3c16d9599770?d=https%3A%2F%2Fidenticons.github.com%2F906a7cf4657ab3f2f031889a0ed25057.png&amp;r=x&amp;s=140" width="24" />
    <span class="author"><a href="/desandro" rel="author">desandro</a></span>
    <time class="js-relative-date" data-title-format="YYYY-MM-DD HH:mm:ss" datetime="2014-03-15T10:27:21-04:00" title="2014-03-15 15:27:21">March 15, 2014</time>
    <div class="commit-title">
        <a href="/desandro/masonry/commit/e4507dca3f3919054bf8b8de9a24a90bd5368080" class="message" data-pjax="true" title="add pkgd files, built with Grunt

Ref #484">add pkgd files, built with Grunt</a>
    </div>

    <div class="participation">
      <p class="quickstat"><a href="#blob_contributors_box" rel="facebox"><strong>1</strong> contributor</a></p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list">
          <li class="facebox-user-list-item">
            <img alt="David DeSandro" class=" js-avatar" data-user="85566" height="24" src="https://1.gravatar.com/avatar/08452845db61b0edbb0c3c16d9599770?d=https%3A%2F%2Fidenticons.github.com%2F906a7cf4657ab3f2f031889a0ed25057.png&amp;r=x&amp;s=140" width="24" />
            <a href="/desandro">desandro</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
        <span class="icon"><b class="octicon octicon-file-text"></b></span>
        <span class="mode" title="File Mode">file</span>
        <span class="meta-divider"></span>
          <span>9 lines (8 sloc)</span>
          <span class="meta-divider"></span>
        <span>25.25 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
            <a class="minibutton tooltipped tooltipped-w js-conduit-openfile-check"
               href="http://mac.github.com"
               data-url="github-mac://openRepo/https://github.com/desandro/masonry?branch=master&amp;filepath=dist%2Fmasonry.pkgd.min.js"
               aria-label="Open this file in GitHub for Mac"
               data-failed-title="Your version of GitHub for Mac is too old to open this file. Try checking for updates.">
                <span class="octicon octicon-device-desktop"></span> Open
            </a>
                <a class="minibutton tooltipped tooltipped-n js-update-url-with-hash"
                   aria-label="Clicking this button will automatically fork this project so you can edit the file"
                   href="/desandro/masonry/edit/master/dist/masonry.pkgd.min.js"
                   data-method="post" rel="nofollow">Edit</a>
          <a href="/desandro/masonry/raw/master/dist/masonry.pkgd.min.js" class="button minibutton " id="raw-url">Raw</a>
            <a href="/desandro/masonry/blame/master/dist/masonry.pkgd.min.js" class="button minibutton js-update-url-with-hash">Blame</a>
          <a href="/desandro/masonry/commits/master/dist/masonry.pkgd.min.js" class="button minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->

            <a class="minibutton danger empty-icon tooltipped tooltipped-s"
               href="/desandro/masonry/delete/master/dist/masonry.pkgd.min.js"
               aria-label="Fork this project and delete file"
               data-method="post" data-test-id="delete-blob-file" rel="nofollow">

          Delete
        </a>
      </div><!-- /.actions -->
    </div>
        <div class="blob-wrapper data type-javascript js-blob-data">
        <table class="file-code file-diff tab-size-8">
          <tr class="file-code-line">
            <td class="blob-line-nums">
              <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>

            </td>
            <td class="blob-line-code"><div class="code-body highlight"><pre><div class='line' id='LC1'><span class="cm">/*!</span></div><div class='line' id='LC2'><span class="cm"> * Masonry PACKAGED v3.1.5</span></div><div class='line' id='LC3'><span class="cm"> * Cascading grid layout library</span></div><div class='line' id='LC4'><span class="cm"> * http://masonry.desandro.com</span></div><div class='line' id='LC5'><span class="cm"> * MIT License</span></div><div class='line' id='LC6'><span class="cm"> * by David DeSandro</span></div><div class='line' id='LC7'><span class="cm"> */</span></div><div class='line' id='LC8'><br/></div><div class='line' id='LC9'><span class="o">!</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(){}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">option</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">option</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">b</span><span class="p">))})}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">fn</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">k</span><span class="p">[</span><span class="nx">e</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="s2">&quot;_&quot;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">l</span><span class="p">)</span><span class="k">return</span> <span class="nx">l</span><span class="p">}</span><span class="k">else</span> <span class="nx">f</span><span class="p">(</span><span class="s2">&quot;no such method &#39;&quot;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;&#39; for &quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; instance&quot;</span><span class="p">);</span><span class="k">else</span> <span class="nx">f</span><span class="p">(</span><span class="s2">&quot;cannot call methods on &quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; prior to initialization; attempted to call &#39;&quot;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;&#39;&quot;</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">_init</span><span class="p">())</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">))})}}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="s2">&quot;undefined&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">console</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">bridget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">bridget</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">;</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery-bridget/jquery.bridget&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">],</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">)}(</span><span class="nb">window</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">srcElement</span><span class="o">||</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">c</span><span class="p">.</span><span class="nx">addEventListener</span><span class="o">?</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)}</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">attachEvent</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">handleEvent</span><span class="o">?</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">handleEvent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">)}</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">])});</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">c</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="o">?</span><span class="nx">e</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)}</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">detachEvent</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">detachEvent</span><span class="p">(</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">]);</span><span class="k">try</span><span class="p">{</span><span class="k">delete</span> <span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">]}</span><span class="k">catch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">}});</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">{</span><span class="nx">bind</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">unbind</span><span class="o">:</span><span class="nx">e</span><span class="p">};</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;eventie/eventie&quot;</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">exports</span><span class="o">?</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">f</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">eventie</span><span class="o">=</span><span class="nx">f</span><span class="p">}(</span><span class="k">this</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">isReady</span><span class="o">?</span><span class="nx">a</span><span class="p">()</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="s2">&quot;readystatechange&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="s2">&quot;complete&quot;</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">readyState</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">isReady</span><span class="o">&amp;&amp;!</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">isReady</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">h</span><span class="p">()}}}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="s2">&quot;readystatechange&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;load&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="p">}</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="p">.</span><span class="nx">isReady</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">isReady</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">requirejs</span><span class="p">,</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;doc-ready/doc-ready&quot;</span><span class="p">,[</span><span class="s2">&quot;eventie/eventie&quot;</span><span class="p">],</span><span class="nx">d</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">docReady</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">eventie</span><span class="p">)}(</span><span class="k">this</span><span class="p">),</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){}</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">listener</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">getListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getEvents</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">])}</span><span class="k">else</span> <span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">flattenListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">listener</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">getListenersAsObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getListeners</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">),</span><span class="nx">b</span><span class="o">||</span><span class="nx">c</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">addListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getListenersAsObject</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span> <span class="k">in</span> <span class="nx">e</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="p">{</span><span class="nx">listener</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">once</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">on</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;addListener&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">addOnceListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">a</span><span class="p">,{</span><span class="nx">listener</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">once</span><span class="o">:!</span><span class="mi">0</span><span class="p">})},</span><span class="nx">d</span><span class="p">.</span><span class="nx">once</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;addOnceListener&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">defineEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getListeners</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">defineEvents</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">+=</span><span class="mi">1</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">defineEvent</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getListenersAsObject</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">f</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">c</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">off</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;removeListener&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">addListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">manipulateListeners</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">removeListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">manipulateListeners</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">manipulateListeners</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">addListener</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListeners</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">addListeners</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">b</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">--</span><span class="p">;)</span><span class="nx">f</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">d</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">removeEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getEvents</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">)</span><span class="k">delete</span> <span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">delete</span> <span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">else</span> <span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">removeAllListeners</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;removeEvent&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">emitEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getListenersAsObject</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">g</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">--</span><span class="p">;)</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">d</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">once</span><span class="o">===!</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">listener</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">listener</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="o">||</span><span class="p">[]),</span><span class="nx">f</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_getOnceReturnValue</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">listener</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">trigger</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;emitEvent&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">emit</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">emitEvent</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">setOnceReturnValue</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_onceReturnValue</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">_getOnceReturnValue</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s2">&quot;_onceReturnValue&quot;</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_onceReturnValue</span><span class="o">:!</span><span class="mi">0</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">_getEvents</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_events</span><span class="o">=</span><span class="p">{})},</span><span class="nx">a</span><span class="p">.</span><span class="nx">noConflict</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">},</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;eventEmitter/EventEmitter&quot;</span><span class="p">,[],</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">})</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">module</span><span class="o">&amp;&amp;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">?</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">a</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="o">=</span><span class="nx">a</span><span class="p">}.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">])</span><span class="k">return</span> <span class="nx">b</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="s2">&quot;Webkit Moz ms Ms O&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">style</span><span class="p">;</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;get-style-property/get-style-property&quot;</span><span class="p">,[],</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">b</span><span class="p">})</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">exports</span><span class="o">?</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">getStyleProperty</span><span class="o">=</span><span class="nx">b</span><span class="p">}(</span><span class="nb">window</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=-</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;%&quot;</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="nx">width</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">innerWidth</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">innerHeight</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">outerWidth</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">outerHeight</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;none&quot;</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">display</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">();</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="nx">e</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">offsetWidth</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">isBorderBox</span><span class="o">=!</span><span class="p">(</span><span class="o">!</span><span class="nx">j</span><span class="o">||!</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">||</span><span class="s2">&quot;border-box&quot;</span><span class="o">!==</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">]),</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&gt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">o</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">o</span><span class="p">);</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">p</span><span class="p">}</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">paddingLeft</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">paddingRight</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">paddingTop</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">paddingBottom</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">marginLeft</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">marginRight</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">marginTop</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">marginBottom</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">borderLeftWidth</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">borderRightWidth</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">borderTopWidth</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">borderBottomWidth</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">);</span><span class="nx">x</span><span class="o">!==!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">w</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">q</span><span class="o">+</span><span class="nx">u</span><span class="p">));</span><span class="kd">var</span> <span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="k">return</span> <span class="nx">y</span><span class="o">!==!</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">y</span><span class="o">+</span><span class="p">(</span><span class="nx">w</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">r</span><span class="o">+</span><span class="nx">v</span><span class="p">)),</span><span class="nx">e</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="p">(</span><span class="nx">q</span><span class="o">+</span><span class="nx">u</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="p">(</span><span class="nx">r</span><span class="o">+</span><span class="nx">v</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">outerWidth</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">width</span><span class="o">+</span><span class="nx">s</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">outerHeight</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">height</span><span class="o">+</span><span class="nx">t</span><span class="p">,</span><span class="nx">e</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">||-</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;%&quot;</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">runtimeStyle</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">left</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">.</span><span class="nx">left</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">pixelLeft</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">g</span><span class="p">),</span><span class="nx">b</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;boxSizing&quot;</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;200px&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">padding</span><span class="o">=</span><span class="s2">&quot;1px 2px 3px 4px&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">borderStyle</span><span class="o">=</span><span class="s2">&quot;solid&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">borderWidth</span><span class="o">=</span><span class="s2">&quot;1px 2px 3px 4px&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;border-box&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="o">||</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="mi">200</span><span class="o">===</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}(),</span><span class="nx">d</span><span class="p">}</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">null</span><span class="p">)}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">},</span><span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;paddingLeft&quot;</span><span class="p">,</span><span class="s2">&quot;paddingRight&quot;</span><span class="p">,</span><span class="s2">&quot;paddingTop&quot;</span><span class="p">,</span><span class="s2">&quot;paddingBottom&quot;</span><span class="p">,</span><span class="s2">&quot;marginLeft&quot;</span><span class="p">,</span><span class="s2">&quot;marginRight&quot;</span><span class="p">,</span><span class="s2">&quot;marginTop&quot;</span><span class="p">,</span><span class="s2">&quot;marginBottom&quot;</span><span class="p">,</span><span class="s2">&quot;borderLeftWidth&quot;</span><span class="p">,</span><span class="s2">&quot;borderRightWidth&quot;</span><span class="p">,</span><span class="s2">&quot;borderTopWidth&quot;</span><span class="p">,</span><span class="s2">&quot;borderBottomWidth&quot;</span><span class="p">];</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;get-size/get-size&quot;</span><span class="p">,[</span><span class="s2">&quot;get-style-property/get-style-property&quot;</span><span class="p">],</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">exports</span><span class="o">?</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;get-style-property&quot;</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">getSize</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getStyleProperty</span><span class="p">)}(</span><span class="nb">window</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">](</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createDocumentFragment</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matchesSelector</span><span class="p">)</span><span class="k">return</span><span class="s2">&quot;matchesSelector&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;webkit&quot;</span><span class="p">,</span><span class="s2">&quot;moz&quot;</span><span class="p">,</span><span class="s2">&quot;ms&quot;</span><span class="p">,</span><span class="s2">&quot;o&quot;</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot;MatchesSelector&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">])</span><span class="k">return</span> <span class="nx">f</span><span class="p">}}();</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;div&quot;</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">j</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">f</span><span class="p">}</span><span class="k">else</span> <span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;matches-selector/matches-selector&quot;</span><span class="p">,[],</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">g</span><span class="p">})</span><span class="o">:</span><span class="nb">window</span><span class="p">.</span><span class="nx">matchesSelector</span><span class="o">=</span><span class="nx">g</span><span class="p">}(</span><span class="k">this</span><span class="p">,</span><span class="nx">Element</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([A-Z])/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;-&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()})}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="k">this</span><span class="p">.</span><span class="nx">_create</span><span class="p">())}</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="s2">&quot;transition&quot;</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="s2">&quot;transform&quot;</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="o">=!!</span><span class="nx">f</span><span class="p">(</span><span class="s2">&quot;perspective&quot;</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="p">{</span><span class="nx">WebkitTransition</span><span class="o">:</span><span class="s2">&quot;webkitTransitionEnd&quot;</span><span class="p">,</span><span class="nx">MozTransition</span><span class="o">:</span><span class="s2">&quot;transitionend&quot;</span><span class="p">,</span><span class="nx">OTransition</span><span class="o">:</span><span class="s2">&quot;otransitionend&quot;</span><span class="p">,</span><span class="nx">transition</span><span class="o">:</span><span class="s2">&quot;transitionend&quot;</span><span class="p">}[</span><span class="nx">i</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span><span class="s2">&quot;transition&quot;</span><span class="p">,</span><span class="s2">&quot;transitionDuration&quot;</span><span class="p">,</span><span class="s2">&quot;transitionProperty&quot;</span><span class="p">],</span><span class="nx">o</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">)}</span><span class="k">return</span> <span class="nx">a</span><span class="p">}();</span><span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_create</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">_transn</span><span class="o">=</span><span class="p">{</span><span class="nx">ingProperties</span><span class="o">:</span><span class="p">{},</span><span class="nx">clean</span><span class="o">:</span><span class="p">{},</span><span class="nx">onEnd</span><span class="o">:</span><span class="p">{}},</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">position</span><span class="o">:</span><span class="s2">&quot;absolute&quot;</span><span class="p">})},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">handleEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">](</span><span class="nx">a</span><span class="p">)},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">)},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">css</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">o</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">||</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]}},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPosition</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">isOriginLeft</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">isOriginTop</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="o">?</span><span class="s2">&quot;left&quot;</span><span class="o">:</span><span class="s2">&quot;right&quot;</span><span class="p">],</span><span class="mi">10</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="o">?</span><span class="s2">&quot;top&quot;</span><span class="o">:</span><span class="s2">&quot;bottom&quot;</span><span class="p">],</span><span class="mi">10</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">f</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span><span class="nx">e</span><span class="o">-=</span><span class="nx">c</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">paddingLeft</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">paddingRight</span><span class="p">,</span><span class="nx">f</span><span class="o">-=</span><span class="nx">d</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">paddingTop</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">paddingBottom</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">f</span><span class="p">},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">layoutPosition</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">{};</span><span class="nx">b</span><span class="p">.</span><span class="nx">isOriginLeft</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">paddingLeft</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">paddingRight</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">isOriginTop</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">paddingTop</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">paddingBottom</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">emitEvent</span><span class="p">(</span><span class="s2">&quot;layout&quot;</span><span class="p">,[</span><span class="k">this</span><span class="p">])};</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;translate3d(&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;px, &quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;px, 0)&quot;</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;translate(&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;px, &quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;px)&quot;</span><span class="p">};</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_transitionTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">getPosition</span><span class="p">();</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">g</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">isTransitioning</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">layoutPosition</span><span class="p">();</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">{},</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">isOriginLeft</span><span class="o">?</span><span class="nx">h</span><span class="o">:-</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">isOriginTop</span><span class="o">?</span><span class="nx">i</span><span class="o">:-</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">transform</span><span class="o">=</span><span class="nx">p</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">transition</span><span class="p">({</span><span class="nx">to</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">onTransitionEnd</span><span class="o">:</span><span class="p">{</span><span class="nx">transform</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">layoutPosition</span><span class="p">},</span><span class="nx">isCleaning</span><span class="o">:!</span><span class="mi">0</span><span class="p">})},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">goTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">layoutPosition</span><span class="p">()},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">moveTo</span><span class="o">=</span><span class="nx">k</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_transitionTo</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">goTo</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setPosition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">10</span><span class="p">)},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_nonTransition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">to</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">isCleaning</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_removeStyles</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">to</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">onTransitionEnd</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">onTransitionEnd</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_transition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">parseFloat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">transitionDuration</span><span class="p">))</span><span class="k">return</span> <span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">_nonTransition</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_transn</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">onTransitionEnd</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">onTransitionEnd</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">to</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">ingProperties</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">isCleaning</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">clean</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">from</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">from</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">enableTransition</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">to</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">to</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">isTransitioning</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,opacity&quot;</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">enableTransition</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isTransitioning</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">transitionProperty</span><span class="o">:</span><span class="nx">q</span><span class="p">,</span><span class="nx">transitionDuration</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">transitionDuration</span><span class="p">}),</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">))},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">transition</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">i</span><span class="o">?</span><span class="s2">&quot;_transition&quot;</span><span class="o">:</span><span class="s2">&quot;_nonTransition&quot;</span><span class="p">],</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">onwebkitTransitionEnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ontransitionend</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">onotransitionend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ontransitionend</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;-webkit-transform&quot;</span><span class="o">:</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span><span class="s2">&quot;-moz-transform&quot;</span><span class="o">:</span><span class="s2">&quot;transform&quot;</span><span class="p">,</span><span class="s2">&quot;-o-transform&quot;</span><span class="o">:</span><span class="s2">&quot;transform&quot;</span><span class="p">};</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">ontransitionend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_transn</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">propertyName</span><span class="p">]</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">propertyName</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ingProperties</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ingProperties</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">disableTransition</span><span class="p">(),</span><span class="nx">d</span> <span class="k">in</span> <span class="nx">b</span><span class="p">.</span><span class="nx">clean</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">propertyName</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">clean</span><span class="p">[</span><span class="nx">d</span><span class="p">]),</span><span class="nx">d</span> <span class="k">in</span> <span class="nx">b</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">onEnd</span><span class="p">[</span><span class="nx">d</span><span class="p">]}</span><span class="k">this</span><span class="p">.</span><span class="nx">emitEvent</span><span class="p">(</span><span class="s2">&quot;transitionEnd&quot;</span><span class="p">,[</span><span class="k">this</span><span class="p">])}},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">disableTransition</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">removeTransitionStyles</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">isTransitioning</span><span class="o">=!</span><span class="mi">1</span><span class="p">},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_removeStyles</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">b</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="p">{</span><span class="nx">transitionProperty</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">transitionDuration</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">};</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeTransitionStyles</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="nx">s</span><span class="p">)},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeElem</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">emitEvent</span><span class="p">(</span><span class="s2">&quot;remove&quot;</span><span class="p">,[</span><span class="k">this</span><span class="p">])},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">remove</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="o">||!</span><span class="nb">parseFloat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">transitionDuration</span><span class="p">))</span><span class="k">return</span> <span class="k">void</span> <span class="k">this</span><span class="p">.</span><span class="nx">removeElem</span><span class="p">();</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;transitionEnd&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">removeElem</span><span class="p">(),</span><span class="o">!</span><span class="mi">0</span><span class="p">}),</span><span class="k">this</span><span class="p">.</span><span class="nx">hide</span><span class="p">()},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reveal</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">isHidden</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">display</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">});</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">transition</span><span class="p">({</span><span class="nx">from</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">hiddenStyle</span><span class="p">,</span><span class="nx">to</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">visibleStyle</span><span class="p">,</span><span class="nx">isCleaning</span><span class="o">:!</span><span class="mi">0</span><span class="p">})},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hide</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isHidden</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">display</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">});</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">.</span><span class="nx">options</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">transition</span><span class="p">({</span><span class="nx">from</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">visibleStyle</span><span class="p">,</span><span class="nx">to</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">hiddenStyle</span><span class="p">,</span><span class="nx">isCleaning</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">onTransitionEnd</span><span class="o">:</span><span class="p">{</span><span class="nx">opacity</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isHidden</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">display</span><span class="o">:</span><span class="s2">&quot;none&quot;</span><span class="p">})}}})},</span><span class="nx">h</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">destroy</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="nx">position</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">left</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">right</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">top</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">bottom</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">transition</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">transform</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">})},</span><span class="nx">h</span><span class="p">}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kc">null</span><span class="p">)}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">};</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;outlayer/item&quot;</span><span class="p">,[</span><span class="s2">&quot;eventEmitter/EventEmitter&quot;</span><span class="p">,</span><span class="s2">&quot;get-size/get-size&quot;</span><span class="p">,</span><span class="s2">&quot;get-style-property/get-style-property&quot;</span><span class="p">],</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Outlayer</span><span class="o">=</span><span class="p">{},</span><span class="nx">a</span><span class="p">.</span><span class="nx">Outlayer</span><span class="p">.</span><span class="nx">Item</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getSize</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getStyleProperty</span><span class="p">))}(</span><span class="nb">window</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;[object Array]&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">else</span> <span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(.)([A-Z])/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">+</span><span class="s2">&quot;-&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">}).</span><span class="nx">toLowerCase</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">o</span><span class="p">,</span><span class="nx">p</span><span class="p">){</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="o">!</span><span class="nx">a</span><span class="o">||!</span><span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="k">void</span><span class="p">(</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Bad &quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">namespace</span><span class="o">+</span><span class="s2">&quot; element: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="o">=</span><span class="nx">b</span><span class="p">({},</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">defaults</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">option</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=++</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">outlayerGUID</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">s</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_create</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isInitLayout</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">()}</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="p">{};</span><span class="k">return</span> <span class="nx">q</span><span class="p">.</span><span class="nx">namespace</span><span class="o">=</span><span class="s2">&quot;outlayer&quot;</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">Item</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">defaults</span><span class="o">=</span><span class="p">{</span><span class="nx">containerStyle</span><span class="o">:</span><span class="p">{</span><span class="nx">position</span><span class="o">:</span><span class="s2">&quot;relative&quot;</span><span class="p">},</span><span class="nx">isInitLayout</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">isOriginLeft</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">isOriginTop</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">isResizeBound</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">isResizingContainer</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">transitionDuration</span><span class="o">:</span><span class="s2">&quot;0.4s&quot;</span><span class="p">,</span><span class="nx">hiddenStyle</span><span class="o">:</span><span class="p">{</span><span class="nx">opacity</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">transform</span><span class="o">:</span><span class="s2">&quot;scale(0.001)&quot;</span><span class="p">},</span><span class="nx">visibleStyle</span><span class="o">:</span><span class="p">{</span><span class="nx">opacity</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">transform</span><span class="o">:</span><span class="s2">&quot;scale(1)&quot;</span><span class="p">}},</span><span class="nx">b</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">option</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_create</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">reloadItems</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="o">=</span><span class="p">[],</span><span class="k">this</span><span class="p">.</span><span class="nx">stamp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">stamp</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">containerStyle</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isResizeBound</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">bindResize</span><span class="p">()},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reloadItems</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_itemize</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">children</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_itemize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_filterFindItemElements</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">Item</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">)}</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_filterFindItemElements</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">itemSelector</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">(</span><span class="nx">g</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">o</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">])}</span><span class="k">else</span> <span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getItemElements</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">element</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">layout</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">_resetLayout</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">_manageStamps</span><span class="p">();</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isLayoutInstant</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isLayoutInstant</span><span class="o">:!</span><span class="k">this</span><span class="p">.</span><span class="nx">_isLayoutInited</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">layoutItems</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_isLayoutInited</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_init</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">layout</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_resetLayout</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">getSize</span><span class="p">()},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getMeasurement</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">d</span><span class="o">?</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">d</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="nx">m</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">n</span><span class="p">(</span><span class="nx">c</span><span class="p">)[</span><span class="nx">b</span><span class="p">]</span><span class="o">:</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">layoutItems</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getItemsForLayout</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_layoutItems</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_postLayout</span><span class="p">()},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getItemsForLayout</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">isIgnored</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_layoutItems</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(){</span><span class="nx">d</span><span class="p">.</span><span class="nx">emitEvent</span><span class="p">(</span><span class="s2">&quot;layoutComplete&quot;</span><span class="p">,[</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">])}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="o">||!</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">void</span> <span class="nx">c</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">_itemsOn</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;layout&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getItemLayoutPosition</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">item</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">isInstant</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">isLayoutInstant</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">_processLayoutQueue</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getItemLayoutPosition</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_processLayoutQueue</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_positionItem</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">item</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">isInstant</span><span class="p">)}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_positionItem</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">goTo</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_postLayout</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">resizeContainer</span><span class="p">()},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">resizeContainer</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isResizingContainer</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getContainerSize</span><span class="p">();</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_setContainerMeasure</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_setContainerMeasure</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">))}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getContainerSize</span><span class="o">=</span><span class="nx">k</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_setContainerMeasure</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">isBorderBox</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="nx">b</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">paddingLeft</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">paddingRight</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">borderLeftWidth</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">borderRightWidth</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">paddingBottom</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">paddingTop</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">borderTopWidth</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">borderBottomWidth</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">[</span><span class="nx">b</span><span class="o">?</span><span class="s2">&quot;width&quot;</span><span class="o">:</span><span class="s2">&quot;height&quot;</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_itemsOn</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(){</span><span class="k">return</span> <span class="nx">e</span><span class="o">++</span><span class="p">,</span><span class="nx">e</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">j</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">ignore</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">isIgnored</span><span class="o">=!</span><span class="mi">0</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unignore</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">isIgnored</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stamp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_find</span><span class="p">(</span><span class="nx">a</span><span class="p">)){</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">ignore</span><span class="p">(</span><span class="nx">d</span><span class="p">)}}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unstamp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_find</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">e</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">unignore</span><span class="p">(</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_find</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_manageStamps</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_getBoundingRect</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stamps</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_manageStamp</span><span class="p">(</span><span class="nx">c</span><span class="p">)}}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getBoundingRect</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_boundingRect</span><span class="o">=</span><span class="p">{</span><span class="nx">left</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">left</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">paddingLeft</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">borderLeftWidth</span><span class="p">,</span><span class="nx">top</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">top</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">paddingTop</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">borderTopWidth</span><span class="p">,</span><span class="nx">right</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">right</span><span class="o">-</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">paddingRight</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">borderRightWidth</span><span class="p">),</span><span class="nx">bottom</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">bottom</span><span class="o">-</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">paddingBottom</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">borderBottomWidth</span><span class="p">)}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_manageStamp</span><span class="o">=</span><span class="nx">k</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getElementOffset</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getBoundingClientRect</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_boundingRect</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="nx">left</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">left</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">left</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">marginLeft</span><span class="p">,</span><span class="nx">top</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">top</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">top</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">marginTop</span><span class="p">,</span><span class="nx">right</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">right</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">right</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">marginRight</span><span class="p">,</span><span class="nx">bottom</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">bottom</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">bottom</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">marginBottom</span><span class="p">};</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">handleEvent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">](</span><span class="nx">a</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bindResize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isResizeBound</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;resize&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">isResizeBound</span><span class="o">=!</span><span class="mi">0</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">unbindResize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isResizeBound</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;resize&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">isResizeBound</span><span class="o">=!</span><span class="mi">1</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">onresize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">b</span><span class="p">.</span><span class="nx">resize</span><span class="p">(),</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">resizeTimeout</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">resizeTimeout</span><span class="o">&amp;&amp;</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">resizeTimeout</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">resizeTimeout</span><span class="o">=</span><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">100</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">resize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isResizeBound</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsResizeLayout</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">layout</span><span class="p">()},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">needsResizeLayout</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">n</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addItems</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_itemize</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">b</span><span class="p">)),</span><span class="nx">b</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">appended</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">addItems</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">layoutItems</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">reveal</span><span class="p">(</span><span class="nx">b</span><span class="p">))},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">prepended</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_itemize</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_resetLayout</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">_manageStamps</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">layoutItems</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">reveal</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">layoutItems</span><span class="p">(</span><span class="nx">c</span><span class="p">)}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reveal</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">reveal</span><span class="p">()}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hide</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">hide</span><span class="p">()}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getItem</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">element</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="p">}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getItems</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">remove</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getItems</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_itemsOn</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="s2">&quot;remove&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">emitEvent</span><span class="p">(</span><span class="s2">&quot;removeComplete&quot;</span><span class="p">,[</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">])});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">g</span><span class="p">.</span><span class="nx">remove</span><span class="p">(),</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">)}}},</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">destroy</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">destroy</span><span class="p">()}</span><span class="k">this</span><span class="p">.</span><span class="nx">unbindResize</span><span class="p">(),</span><span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">outlayerGUID</span><span class="p">,</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">removeData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">namespace</span><span class="p">)},</span><span class="nx">q</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">outlayerGUID</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">[</span><span class="nx">b</span><span class="p">]},</span><span class="nx">q</span><span class="p">.</span><span class="nx">create</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(){</span><span class="nx">q</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaults</span><span class="o">=</span><span class="nx">b</span><span class="p">({},</span><span class="nx">q</span><span class="p">.</span><span class="nx">defaults</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">settings</span><span class="o">=</span><span class="p">{},</span><span class="nx">d</span><span class="p">.</span><span class="nx">namespace</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">Item</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">p</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">Item</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="k">new</span> <span class="nx">p</span><span class="p">,</span><span class="nx">g</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s2">&quot;.js-&quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="s2">&quot;data-&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;-options&quot;</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">try</span><span class="p">{</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">o</span><span class="p">){</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Error parsing &quot;</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="s2">&quot; on &quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span><span class="o">+</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">id</span><span class="o">?</span><span class="s2">&quot;#&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">id</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">o</span><span class="p">);</span><span class="k">continue</span><span class="p">}</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">)}}),</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">bridget</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">bridget</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">d</span><span class="p">},</span><span class="nx">q</span><span class="p">.</span><span class="nx">Item</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">console</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">jQuery</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">l</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">HTMLElement</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">HTMLElement</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">nodeType</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">},</span><span class="nx">n</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;outlayer/outlayer&quot;</span><span class="p">,[</span><span class="s2">&quot;eventie/eventie&quot;</span><span class="p">,</span><span class="s2">&quot;doc-ready/doc-ready&quot;</span><span class="p">,</span><span class="s2">&quot;eventEmitter/EventEmitter&quot;</span><span class="p">,</span><span class="s2">&quot;get-size/get-size&quot;</span><span class="p">,</span><span class="s2">&quot;matches-selector/matches-selector&quot;</span><span class="p">,</span><span class="s2">&quot;./item&quot;</span><span class="p">],</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">Outlayer</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">eventie</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">docReady</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">EventEmitter</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getSize</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">matchesSelector</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">Outlayer</span><span class="p">.</span><span class="nx">Item</span><span class="p">)}(</span><span class="nb">window</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&quot;masonry&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_resetLayout</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">getSize</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">_getMeasurement</span><span class="p">(</span><span class="s2">&quot;columnWidth&quot;</span><span class="p">,</span><span class="s2">&quot;outerWidth&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_getMeasurement</span><span class="p">(</span><span class="s2">&quot;gutter&quot;</span><span class="p">,</span><span class="s2">&quot;outerWidth&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">measureColumns</span><span class="p">();</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="o">--</span><span class="p">;)</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">maxY</span><span class="o">=</span><span class="mi">0</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">measureColumns</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getContainerWidth</span><span class="p">(),</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">element</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">outerWidth</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">containerWidth</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">gutter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="nx">containerWidth</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">gutter</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getContainerWidth</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isFitWidth</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">.</span><span class="nx">parentNode</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">containerWidth</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getItemLayoutPosition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">getSize</span><span class="p">();</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">outerWidth</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="s2">&quot;round&quot;</span><span class="o">:</span><span class="s2">&quot;ceil&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">[</span><span class="nx">d</span><span class="p">](</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">outerWidth</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getColGroup</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="nx">g</span><span class="p">},</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">outerHeight</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">[</span><span class="nx">h</span><span class="o">+</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">return</span> <span class="nx">i</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getColGroup</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_manageStamp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getElementOffset</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isOriginLeft</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">left</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">outerWidth</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">f</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="p">);</span><span class="nx">h</span><span class="o">-=</span><span class="nx">f</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isOriginTop</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">top</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">bottom</span><span class="p">)</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">outerHeight</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">&gt;=</span><span class="nx">j</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">[</span><span class="nx">j</span><span class="p">])},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getContainerSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">maxY</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nb">Math</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="nx">height</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">maxY</span><span class="p">};</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">isFitWidth</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_getContainerFitWidth</span><span class="p">()),</span><span class="nx">a</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">_getContainerFitWidth</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="p">;</span><span class="o">--</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">colYs</span><span class="p">[</span><span class="nx">b</span><span class="p">];)</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cols</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">columnWidth</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">gutter</span><span class="p">},</span><span class="nx">d</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">needsResizeLayout</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">containerWidth</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getContainerWidth</span><span class="p">(),</span><span class="nx">a</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">containerWidth</span><span class="p">},</span><span class="nx">d</span><span class="p">}</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">([</span><span class="s2">&quot;outlayer/outlayer&quot;</span><span class="p">,</span><span class="s2">&quot;get-size/get-size&quot;</span><span class="p">],</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">Masonry</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">Outlayer</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">getSize</span><span class="p">)}(</span><span class="nb">window</span><span class="p">);</span></div></pre></div></td>
          </tr>
        </table>
  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" class="js-jump-to-line" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.05337s from github-fe120-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-fullscreen-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="js-fullscreen-contents" placeholder="" data-suggester="fullscreen_suggester"></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-remove-close close js-ajax-error-dismiss"></a>
      Something went wrong with that request. Please try again.
    </div>

  </body>
</html>

